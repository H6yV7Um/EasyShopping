<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="com.easy.order.dao.Mapper.OrderMapper">

    <!-- 在 映射文件中配置很多sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过 select执行数据库查询
    id：标识 映射文件中的 sql
    将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType：指定输入 参数的类型，这里指定int型
    #{}表示一个占位符号
    #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称

    resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。
     -->

    <select id="findOrderById" parameterType="string" resultType="com.easy.order.dao.bean.ShopOrder">
        SELECT * FROM ShopOrder WHERE id=#{id}
    </select>
    <select id="findAllOrders"  resultType="com.easy.order.dao.bean.ShopOrder">
        SELECT *  FROM ShopOrder
    </select>
    <select id="listByStatus"  resultType="com.easy.order.dao.bean.ShopRecorder">
        SELECT a.id,a.goodsId,a.total,a.num,a.createTime,b.name ,b.imageId ,b.price FROM ShopOrder a ,Goods b  WHERE  a.goodsId=b.id and a.status=#{status}
        order by a.createTime desc

    </select>

    <insert id="add" parameterType="com.easy.order.dao.bean.ShopOrder">
        insert into ShopOrder(id,goodsId, creator,creatorId,createTime,type,num,total,status)
        values(#{id}, #{goodsId}, #{creator} , #{creatorId}, #{createTime}, #{type},#{num}, #{total}, #{status})
    </insert>
    <update id="update"  parameterType="com.easy.order.dao.bean.ShopOrder" >
        update ShopOrder SET goodsId=#{goodsId},creator=#{creator},creatorId=#{creatorId},
        createTime=#{createTime},type=#{type},num=#{num},total=#{total},status=#{status}
        where id=#{id}
    </update>
    <delete id="delete" parameterType="String">
        delete from ShopOrder where id=#{id}
    </delete>
</mapper>
